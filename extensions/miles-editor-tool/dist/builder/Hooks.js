"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onAfterMake = exports.onBeforeMake = exports.onError = exports.onAfterBuild = exports.onAfterCompressSettings = exports.onBeforeCompressSettings = exports.onBeforeBuild = void 0;
const Config_1 = require("../tools/Config");
const Utils_1 = require("../tools/Utils");
const BuildLogger_1 = require("./BuildLogger");
const BuildConfig_1 = require("./postbuild/BuildConfig");
const HotUpdate_1 = require("./postbuild/HotUpdate");
const Minigame_1 = require("./postbuild/Minigame");
const tag = "[Build]";
const onBeforeBuild = async function (options, result) {
    // Todo some thing
};
exports.onBeforeBuild = onBeforeBuild;
const onBeforeCompressSettings = async function (options, result) {
    // Todo some thing
};
exports.onBeforeCompressSettings = onBeforeCompressSettings;
const onAfterCompressSettings = async function (options, result) {
    // Todo some thing
};
exports.onAfterCompressSettings = onAfterCompressSettings;
const onAfterBuild = async function (options, result) {
    BuildLogger_1.BuildLogger.info(tag, "后处理开始");
    BuildConfig_1.BuildConfig.execute(options, result);
    if (Utils_1.Utils.isNative(options.platform)) {
        /** 是否启用热更 */
        let hotupdateEnable = Config_1.Config.get("gameSetting.hotupdate", false);
        BuildLogger_1.BuildLogger.info(tag, 'hotupdateEnable', hotupdateEnable);
        if (hotupdateEnable) {
            HotUpdate_1.HotUpdate.modifyJsFile(options, result);
            HotUpdate_1.HotUpdate.replaceManifest(options, result);
        }
    }
    if (Utils_1.Utils.isMinigame(options.platform)) {
        if (!options.md5Cache) {
            BuildLogger_1.BuildLogger.warn(tag, "小游戏建议开启Md5Cache");
        }
        await Minigame_1.Minigame.modifyServer(options, result);
        await Minigame_1.Minigame.uploadToAliOss(options, result);
    }
    BuildLogger_1.BuildLogger.info(tag, "后处理结束");
};
exports.onAfterBuild = onAfterBuild;
const onError = async function (options, result) {
    // Todo some thing
};
exports.onError = onError;
const onBeforeMake = async function (root, options) {
    // Todo some thing
};
exports.onBeforeMake = onBeforeMake;
const onAfterMake = async function (root, options) {
    // Todo some thing
};
exports.onAfterMake = onAfterMake;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zb3VyY2UvYnVpbGRlci9Ib29rcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw0Q0FBeUM7QUFDekMsMENBQXVDO0FBQ3ZDLCtDQUE0QztBQUM1Qyx5REFBc0Q7QUFDdEQscURBQWtEO0FBQ2xELG1EQUFnRDtBQUVoRCxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUM7QUFFZixNQUFNLGFBQWEsR0FBNEIsS0FBSyxXQUFXLE9BQXlCLEVBQUUsTUFBb0I7SUFDakgsa0JBQWtCO0FBQ3RCLENBQUMsQ0FBQztBQUZXLFFBQUEsYUFBYSxpQkFFeEI7QUFFSyxNQUFNLHdCQUF3QixHQUF1QyxLQUFLLFdBQVcsT0FBeUIsRUFBRSxNQUFvQjtJQUN2SSxrQkFBa0I7QUFDdEIsQ0FBQyxDQUFDO0FBRlcsUUFBQSx3QkFBd0IsNEJBRW5DO0FBRUssTUFBTSx1QkFBdUIsR0FBc0MsS0FBSyxXQUFXLE9BQXlCLEVBQUUsTUFBb0I7SUFDckksa0JBQWtCO0FBQ3RCLENBQUMsQ0FBQztBQUZXLFFBQUEsdUJBQXVCLDJCQUVsQztBQUVLLE1BQU0sWUFBWSxHQUEyQixLQUFLLFdBQVcsT0FBeUIsRUFBRSxNQUFvQjtJQUMvRyx5QkFBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0IseUJBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLElBQUksYUFBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDbEMsYUFBYTtRQUNiLElBQUksZUFBZSxHQUFHLGVBQU0sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakUseUJBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzFELElBQUksZUFBZSxFQUFFO1lBQ2pCLHFCQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4QyxxQkFBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDOUM7S0FDSjtJQUNELElBQUksYUFBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDbkIseUJBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7U0FDNUM7UUFDRCxNQUFNLG1CQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxNQUFNLG1CQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNsRDtJQUNELHlCQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUM7QUFwQlcsUUFBQSxZQUFZLGdCQW9CdkI7QUFFSyxNQUFNLE9BQU8sR0FBc0IsS0FBSyxXQUFXLE9BQU8sRUFBRSxNQUFNO0lBQ3JFLGtCQUFrQjtBQUN0QixDQUFDLENBQUM7QUFGVyxRQUFBLE9BQU8sV0FFbEI7QUFFSyxNQUFNLFlBQVksR0FBMkIsS0FBSyxXQUFXLElBQUksRUFBRSxPQUFPO0lBQzdFLGtCQUFrQjtBQUN0QixDQUFDLENBQUM7QUFGVyxRQUFBLFlBQVksZ0JBRXZCO0FBRUssTUFBTSxXQUFXLEdBQTBCLEtBQUssV0FBVyxJQUFJLEVBQUUsT0FBTztJQUMzRSxrQkFBa0I7QUFDdEIsQ0FBQyxDQUFDO0FBRlcsUUFBQSxXQUFXLGVBRXRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbGRIb29rLCBJQnVpbGRSZXN1bHQsIElCdWlsZFRhc2tPcHRpb24gfSBmcm9tICcuLi8uLi9AY29jb3MvY3JlYXRvci10eXBlcy9lZGl0b3IvcGFja2FnZXMvYnVpbGRlci9AdHlwZXMnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL3Rvb2xzL0NvbmZpZ1wiO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi90b29scy9VdGlscyc7XG5pbXBvcnQgeyBCdWlsZExvZ2dlciB9IGZyb20gJy4vQnVpbGRMb2dnZXInO1xuaW1wb3J0IHsgQnVpbGRDb25maWcgfSBmcm9tICcuL3Bvc3RidWlsZC9CdWlsZENvbmZpZyc7XG5pbXBvcnQgeyBIb3RVcGRhdGUgfSBmcm9tICcuL3Bvc3RidWlsZC9Ib3RVcGRhdGUnO1xuaW1wb3J0IHsgTWluaWdhbWUgfSBmcm9tICcuL3Bvc3RidWlsZC9NaW5pZ2FtZSc7XG5cbmNvbnN0IHRhZyA9IFwiW0J1aWxkXVwiO1xuXG5leHBvcnQgY29uc3Qgb25CZWZvcmVCdWlsZDogQnVpbGRIb29rLm9uQmVmb3JlQnVpbGQgPSBhc3luYyBmdW5jdGlvbiAob3B0aW9uczogSUJ1aWxkVGFza09wdGlvbiwgcmVzdWx0OiBJQnVpbGRSZXN1bHQpIHtcbiAgICAvLyBUb2RvIHNvbWUgdGhpbmdcbn07XG5cbmV4cG9ydCBjb25zdCBvbkJlZm9yZUNvbXByZXNzU2V0dGluZ3M6IEJ1aWxkSG9vay5vbkJlZm9yZUNvbXByZXNzU2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAob3B0aW9uczogSUJ1aWxkVGFza09wdGlvbiwgcmVzdWx0OiBJQnVpbGRSZXN1bHQpIHtcbiAgICAvLyBUb2RvIHNvbWUgdGhpbmdcbn07XG5cbmV4cG9ydCBjb25zdCBvbkFmdGVyQ29tcHJlc3NTZXR0aW5nczogQnVpbGRIb29rLm9uQWZ0ZXJDb21wcmVzc1NldHRpbmdzID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnM6IElCdWlsZFRhc2tPcHRpb24sIHJlc3VsdDogSUJ1aWxkUmVzdWx0KSB7XG4gICAgLy8gVG9kbyBzb21lIHRoaW5nXG59O1xuXG5leHBvcnQgY29uc3Qgb25BZnRlckJ1aWxkOiBCdWlsZEhvb2sub25BZnRlckJ1aWxkID0gYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnM6IElCdWlsZFRhc2tPcHRpb24sIHJlc3VsdDogSUJ1aWxkUmVzdWx0KSB7XG4gICAgQnVpbGRMb2dnZXIuaW5mbyh0YWcsIFwi5ZCO5aSE55CG5byA5aeLXCIpO1xuICAgIEJ1aWxkQ29uZmlnLmV4ZWN1dGUob3B0aW9ucywgcmVzdWx0KTtcbiAgICBpZiAoVXRpbHMuaXNOYXRpdmUob3B0aW9ucy5wbGF0Zm9ybSkpIHtcbiAgICAgICAgLyoqIOaYr+WQpuWQr+eUqOeDreabtCAqL1xuICAgICAgICBsZXQgaG90dXBkYXRlRW5hYmxlID0gQ29uZmlnLmdldChcImdhbWVTZXR0aW5nLmhvdHVwZGF0ZVwiLCBmYWxzZSk7XG4gICAgICAgIEJ1aWxkTG9nZ2VyLmluZm8odGFnLCAnaG90dXBkYXRlRW5hYmxlJywgaG90dXBkYXRlRW5hYmxlKTtcbiAgICAgICAgaWYgKGhvdHVwZGF0ZUVuYWJsZSkge1xuICAgICAgICAgICAgSG90VXBkYXRlLm1vZGlmeUpzRmlsZShvcHRpb25zLCByZXN1bHQpO1xuICAgICAgICAgICAgSG90VXBkYXRlLnJlcGxhY2VNYW5pZmVzdChvcHRpb25zLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChVdGlscy5pc01pbmlnYW1lKG9wdGlvbnMucGxhdGZvcm0pKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5tZDVDYWNoZSkge1xuICAgICAgICAgICAgQnVpbGRMb2dnZXIud2Fybih0YWcsIFwi5bCP5ri45oiP5bu66K6u5byA5ZCvTWQ1Q2FjaGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgTWluaWdhbWUubW9kaWZ5U2VydmVyKG9wdGlvbnMsIHJlc3VsdCk7XG4gICAgICAgIGF3YWl0IE1pbmlnYW1lLnVwbG9hZFRvQWxpT3NzKG9wdGlvbnMsIHJlc3VsdCk7XG4gICAgfVxuICAgIEJ1aWxkTG9nZ2VyLmluZm8odGFnLCBcIuWQjuWkhOeQhue7k+adn1wiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBvbkVycm9yOiBCdWlsZEhvb2sub25FcnJvciA9IGFzeW5jIGZ1bmN0aW9uIChvcHRpb25zLCByZXN1bHQpIHtcbiAgICAvLyBUb2RvIHNvbWUgdGhpbmdcbn07XG5cbmV4cG9ydCBjb25zdCBvbkJlZm9yZU1ha2U6IEJ1aWxkSG9vay5vbkJlZm9yZU1ha2UgPSBhc3luYyBmdW5jdGlvbiAocm9vdCwgb3B0aW9ucykge1xuICAgIC8vIFRvZG8gc29tZSB0aGluZ1xufTtcblxuZXhwb3J0IGNvbnN0IG9uQWZ0ZXJNYWtlOiBCdWlsZEhvb2sub25BZnRlck1ha2UgPSBhc3luYyBmdW5jdGlvbiAocm9vdCwgb3B0aW9ucykge1xuICAgIC8vIFRvZG8gc29tZSB0aGluZ1xufTtcblxuIl19