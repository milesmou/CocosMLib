"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildConfig = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const Constant_1 = require("../../tools/Constant");
const Utils_1 = require("../../tools/Utils");
const BuildLogger_1 = require("../BuildLogger");
/** 自定义构建配置处理 */
class BuildConfig {
    static execute(options, result) {
        let buildConfigDir = `${Utils_1.Utils.ProjectPath}/${Constant_1.Constant.BuildConfigDirName}`;
        fs_extra_1.default.ensureDirSync(buildConfigDir);
        let buildConfig = `${Utils_1.Utils.ProjectPath}/${Constant_1.Constant.BuildConfigDirName}/${options.taskName}.json`;
        if (!fs_extra_1.default.existsSync(buildConfig))
            this.createBuildConfig(buildConfig);
        let config = fs_extra_1.default.readJsonSync(buildConfig, { encoding: "utf8" });
        this.copyTemplate(options, result);
        this.insert(options, result, config.insert);
        this.replace(options, result, config.replace);
        this.replaceAsset(options, result, config.replaceAsset);
    }
    static createBuildConfig(path) {
        let obj = {
            "注释": {
                "!注意!": "下面的file字段均为与构建目录的相对路径",
                "insert": "在指定文件的指定行插入需要的代码 字段解释{file:文件名 line:第几行 content:插入内容}",
                "replace": "替换指定文件中的字符串为需要的值 字段解释{file:文件名 label:文件中被替代的文本 scriptName:从GameSetting上哪个脚本获取属性值 scriptField:脚本中的字段名字}",
                "replaceAsset": "使用assets目录中的文件替换打包后的文件 字段解释{uuid:被替换文件的uuid asset:buildConfig下assets目录中的文件名 }"
            },
            "insert": [],
            "replace": [],
            "replaceAsset": []
        };
        fs_extra_1.default.createFileSync(path);
        fs_extra_1.default.writeJsonSync(path, obj, { spaces: 4 });
    }
    /**  拷贝模板目录资源 */
    static copyTemplate(options, result) {
        let tag = "[Template]";
        let templatePath = `${Utils_1.Utils.ProjectPath}/${Constant_1.Constant.BuildConfigDirName}/${Constant_1.Constant.BuildTemplateDirName}/${options.taskName}`;
        fs_extra_1.default.ensureDirSync(templatePath);
        let buildPath = Utils_1.Utils.toUniSeparator(result.dest);
        let files = Utils_1.Utils.getAllFiles(templatePath);
        let buildDest = this.resolveBuildDest(buildPath, options.platform);
        for (const file of files) {
            let f = file.replace(templatePath, "").replace("/", "");
            let newFile = Utils_1.Utils.resolveFilePath(buildDest + "/" + f);
            fs_extra_1.default.ensureDirSync(path_1.default.dirname(newFile));
            fs_extra_1.default.copyFileSync(file, newFile);
            BuildLogger_1.BuildLogger.info(tag, "copy file", f);
        }
    }
    /** 在文件指定位置插入代码 */
    static insert(options, result, data) {
        if (!data)
            return;
        let tag = "[InsertCode]";
        let buildDest = this.resolveBuildDest(Utils_1.Utils.toUniSeparator(result.dest), options.platform);
        for (const d of data) {
            let destFile = Utils_1.Utils.resolveFilePath(buildDest + "/" + d.file);
            if (!fs_extra_1.default.existsSync(destFile)) {
                BuildLogger_1.BuildLogger.warn(tag, "文件不存在", d.file);
                continue;
            }
            let codeArr;
            if (typeof d.content === "string") {
                codeArr = d.content.split("\n");
            }
            else {
                codeArr = d.content;
            }
            let destContent = fs_extra_1.default.readFileSync(destFile, { encoding: "utf8" });
            let destArr = destContent.split("\r\n");
            if (destArr.length < 2) {
                destArr = destContent.split("\n");
            }
            destArr.splice(d.line - 1, 0, ...codeArr);
            fs_extra_1.default.writeFileSync(destFile, destArr.join("\n"));
            BuildLogger_1.BuildLogger.info(tag, d.file);
        }
    }
    /** 替换指定文件中的字符串为需要的值 */
    static replace(options, result, data) {
        if (!data)
            return;
        let tag = "[ReplaceValue]";
        let buildDest = this.resolveBuildDest(Utils_1.Utils.toUniSeparator(result.dest), options.platform);
        let mainScene = Utils_1.Utils.findFile(Utils_1.Utils.ProjectPath + "/assets", v => v.endsWith("main.scene"));
        if (!fs_extra_1.default.existsSync(mainScene)) {
            BuildLogger_1.BuildLogger.warn(tag, "main.scene文件不存在");
            return;
        }
        let objs = fs_extra_1.default.readJsonSync(mainScene, { encoding: "utf-8" });
        for (const d of data) {
            let destFile = Utils_1.Utils.resolveFilePath(buildDest + "/" + d.file);
            if (!fs_extra_1.default.existsSync(destFile)) {
                BuildLogger_1.BuildLogger.warn(tag, "文件不存在", d.file);
                continue;
            }
            let obj = objs.find(v => v['_scriptName'] == d.scriptName);
            if (obj) {
                let value = obj[d.scriptField];
                let destContent = fs_extra_1.default.readFileSync(destFile, { encoding: "utf8" });
                destContent = destContent.replace(d.label, value);
                fs_extra_1.default.writeFileSync(destFile, destContent);
                BuildLogger_1.BuildLogger.info(tag, d.file, d.label, value);
            }
            else {
                BuildLogger_1.BuildLogger.warn(tag, "对象未找到", d.scriptName);
            }
        }
    }
    /** 使用assets目录中的文件替换打包后的文件 */
    static replaceAsset(options, result, data) {
        let assetsPath = `${Utils_1.Utils.ProjectPath}/${Constant_1.Constant.BuildConfigDirName}/${Constant_1.Constant.BuildAssetsDirName}`;
        fs_extra_1.default.ensureDirSync(assetsPath);
        if (!data)
            return;
        let tag = "[ReplaceAssetValue]";
        let buildDest = this.resolveBuildDest(Utils_1.Utils.toUniSeparator(result.dest), options.platform);
        for (const d of data) {
            let oFile = `${assetsPath}/${d.asset}`;
            if (!fs_extra_1.default.existsSync(oFile)) {
                BuildLogger_1.BuildLogger.warn(tag, "源文件文件不存在", d.uuid, d.asset);
                continue;
            }
            let ext = path_1.default.extname(oFile);
            let destFile = Utils_1.Utils.getAllFiles(buildDest, file => file.includes(d.uuid) && file.endsWith(ext))[0];
            if (!fs_extra_1.default.existsSync(destFile)) {
                BuildLogger_1.BuildLogger.warn(tag, "目标文件不存在", d.uuid, d.asset);
                continue;
            }
            fs_extra_1.default.copyFileSync(oFile, destFile);
            BuildLogger_1.BuildLogger.info(tag, d.uuid, d.asset);
        }
    }
    static resolveBuildDest(buildDest, platform) {
        // if (platform == "android") {
        //     return buildDest + "/frameworks/runtime-src/proj.android-studio";
        // } else if (platform == "ios") {
        //     return buildDest + "/frameworks/runtime-src/proj.ios_mac";
        // } else if (platform == "win32") {
        //     return buildDest + "/frameworks/runtime-src/proj.win32";
        // }
        return buildDest;
    }
}
exports.BuildConfig = BuildConfig;
//# sourceMappingURL=data:application/json;base64,