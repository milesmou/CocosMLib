"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AliOSS = void 0;
/**
应当在工程settings目录保存ali_oss_config.json文件，格式为
{
    "accessKeyId": "",
    "accessKeySecret": "",
    "region": "",
    "bucket": ""
}
*/
const ali_oss_1 = __importDefault(require("ali-oss"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const BuildLogger_1 = require("../../builder/BuildLogger");
const Constant_1 = require("../../tools/Constant");
const Utils_1 = require("../../tools/Utils");
/** 上传文件时 在元数据保留最后修改时间 方便上传时比较 */
const mTimeKey = "x-oss-meta-last-modified";
const tag = "[AliOSS]";
/** 上传并发数量 */
const concurrent = 10;
/** 文件上传失败重试次数 */
const retry = 3;
let endResolve;
/** 阿里云oss上传工具 */
class AliOSS {
    /**
     * 上传本地资源目录到oss指定目录
     * @param localDir 本地资源目录地址
     * @param ossDir OSS目录地址 例：需要上传到(oss://bucketName/Test/) 此时应该填(Test/) 不需要包含前面的部分
     */
    constructor(localDir, ossDir) {
        /** OSS客户端 */
        this.client = null;
        this.localDir = "";
        this.ossDir = "";
        /** 文件重试次数 */
        this.retryCnt = new Map();
        this.startTimeMS = 0;
        this.totalCnt = 0; //总共数量
        this.succCnt = 0; //成功数量
        this.failCnt = 0; //失败数量
        this.skipCnt = 0; //跳过数量
        this.percent = 0.1;
        this.localDir = Utils_1.Utils.toUniSeparator(localDir);
        this.ossDir = ossDir;
    }
    /**
     * 上传资源
     * @param taskName 构建任务名字(可能不同的构建任务需要上传到不同的OSS)
     * @param files 需要上传的文件
     */
    async upload(taskName, files) {
        let p = new Promise((resolve, reject) => {
            let configPath = taskName + "_" + Constant_1.Constant.AliOSSConfigFilePath;
            if (!fs_extra_1.default.existsSync(configPath)) {
                configPath = Constant_1.Constant.AliOSSConfigFilePath;
            }
            if (!fs_extra_1.default.existsSync(configPath)) {
                BuildLogger_1.BuildLogger.info(tag, "ali_oss_config.json文件不存在,跳过上传");
                return;
            }
            try {
                let config = fs_extra_1.default.readJSONSync(configPath);
                let ossDirPrefix = config['ossDirPrefix'];
                if (ossDirPrefix)
                    this.ossDir = Utils_1.Utils.toUniSeparator(path_1.default.join(ossDirPrefix, this.ossDir));
                this.client = new ali_oss_1.default(config);
            }
            catch (e) {
                BuildLogger_1.BuildLogger.error(e);
                resolve();
                return;
            }
            BuildLogger_1.BuildLogger.info(tag, `LocalDir=${this.localDir} OSSDir=${this.ossDir}`);
            this.remainFiles = files;
            this.totalCnt = this.remainFiles.length;
            this.startTimeMS = Date.now();
            BuildLogger_1.BuildLogger.info(tag, `正在上传中 请耐心等待 文件数量:${this.totalCnt}`);
            for (let i = 0; i < concurrent; i++) {
                if (this.remainFiles.length > 0) {
                    this.uploadFile(this.remainFiles.pop());
                }
            }
            endResolve = resolve;
        });
        return p;
    }
    /** 文件是否已经存在OSS中 */
    async isFileExistsInOss(localPath) {
        let remotePath = this.localToOssPath(localPath);
        BuildLogger_1.BuildLogger.info(tag, localPath, remotePath);
        try {
            const result = await this.client.head(remotePath);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    localToOssPath(file) {
        let dirName = path_1.default.basename(this.localDir);
        let suffix = file.replace(this.localDir, dirName);
        let remotePath = Utils_1.Utils.toUniSeparator(path_1.default.join(this.ossDir, suffix));
        return remotePath;
    }
    async uploadFile(localPath) {
        let remotePath = this.localToOssPath(localPath);
        const stat = fs_extra_1.default.statSync(localPath);
        const mTimeMS = stat.mtime.getTime();
        try {
            const result = await this.client.head(remotePath);
            let timeMS = result.res.headers[mTimeKey];
            let size = result.res.headers["content-length"];
            if (size == stat.size && timeMS == mTimeMS) {
                this.uploadEnded(localPath, 2);
                return;
            }
        }
        catch (e) { }
        try {
            const headers = { [mTimeKey]: mTimeMS };
            await this.client.put(remotePath, localPath, { headers: headers });
            this.uploadEnded(localPath, 1);
        }
        catch (err) {
            this.uploadEnded(localPath, 0, err);
        }
    }
    uploadEnded(file, code, err) {
        if (code == 0) { //失败重试检测
            let re = this.retryCnt.has(file) ? this.retryCnt.get(file) : retry;
            if (re > 0) {
                this.uploadFile(file);
                this.retryCnt.set(file, re - 1);
                return;
            }
            else {
                console.error(tag, `上传失败 ${file} `, err.message);
            }
        }
        if (code == 1)
            this.succCnt += 1;
        else if (code == 2)
            this.skipCnt += 1;
        else
            this.failCnt += 1;
        this.checkComplete();
    }
    checkComplete() {
        let complete = this.succCnt + this.failCnt + this.skipCnt;
        if (complete == Math.floor(this.totalCnt * this.percent)) { //达到某个进度时打印
            BuildLogger_1.BuildLogger.info(tag, `上传进度:${Math.round(this.percent * 100)}%`);
            this.percent += 0.1;
        }
        if (complete != this.totalCnt) { //未上传完成
            if (this.remainFiles.length > 0) {
                this.uploadFile(this.remainFiles.pop()); //继续上传
            }
            return;
        }
        //全部上传完成
        let dtTimeMS = Math.floor((Date.now() - this.startTimeMS) / 1000);
        if (this.failCnt > 0) {
            BuildLogger_1.BuildLogger.error(tag, `上传失败 总共:${this.totalCnt} 失败:${this.failCnt} 耗时:${dtTimeMS}秒`);
        }
        else {
            BuildLogger_1.BuildLogger.info(tag, `上传成功 总共:${this.totalCnt} 上传:${this.succCnt} 跳过:${this.skipCnt} 耗时:${dtTimeMS}秒`);
        }
        endResolve();
    }
}
exports.AliOSS = AliOSS;
//# sourceMappingURL=data:application/json;base64,