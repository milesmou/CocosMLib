// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        size:  { value: [500, 51] , editor: { tooltip: '节点实际尺寸' } }
        center:  { value: [0.5, 0.5], editor: { tooltip: '中心点 (左上角为原点)' } }
        width:  { value: 0.5, editor: { tooltip: '宽 (目标宽度 / 节点宽度)' } }
        height: { value: 0.5, editor: { tooltip: '高 (目标高度 / 节点宽度)' } }
        bRadius:  { value: 0.05, editor: { tooltip: '圆角半径 (目标半径 / 节点宽度)' } }
        feather:  { value: 0.005, editor: { tooltip: '边缘虚化宽度' } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  
  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  uniform Props {
    vec2 size;
    vec2 center;
    float width;
    float height;
    float bRadius;
    float feather;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif
    o *= color;

    vec4 color1 = o;

  #if USE_TEXTURE
    // 边缘处理
    float x = uv0.x;
    float y = uv0.y;
    float ratio = size.x / size.y;
    float minX = center.x - (width / 2.0);
    float maxX = center.x + (width / 2.0);
    float minY = center.y - (height * ratio / 2.0);
    float maxY = center.y + (height * ratio / 2.0);
    if (x >= minX && x <= maxX && y >= minY && y <= maxY) {
      if (bRadius == 0.0) discard; //没有圆角则直接丢弃
      // 圆角处理
      float roundY = bRadius * ratio;
      vec2 vertex;
      if (x <= minX + bRadius) {
        if (y <= minY + roundY) {
          vertex = vec2(minX + bRadius, (minY + roundY) / ratio); // 左上角
        } else if (y >= maxY - roundY) {
          vertex = vec2(minX + bRadius, (maxY - roundY) / ratio); // 左下角
        } else {
          vertex = vec2(minX + bRadius, y / ratio); // 左中
        }
      } else if (x >= maxX - bRadius) {
        if (y <= minY + roundY){
          vertex = vec2(maxX - bRadius, (minY + roundY) / ratio); // 右上角
        } else if (y >= maxY - roundY) {
          vertex = vec2(maxX - bRadius, (maxY - roundY) / ratio); // 右下角
        } else {
          vertex = vec2(maxX - bRadius, y / ratio); // 右中
        }
      } else if (y <= minY + roundY) {
        vertex = vec2(x, (minY + roundY) / ratio); // 上中
      } else if (y >= maxY - roundY) {
        vertex = vec2(x, (maxY - roundY) / ratio); // 下中
      } else {
        discard; // 中间
      }
      float dis = distance(vec2(x, y / ratio), vertex);
      color1.a = smoothstep(bRadius - feather, bRadius, dis) * color1.a;
    }
      color1.a *= o.a;
  #endif

    ALPHA_TEST(color1);
    return color1;
  }
}%
