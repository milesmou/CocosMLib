// <auto-generated> This code was generated automatically. Do not modify. </auto-generated>

import { HttpRequest } from "../../../module/network/HttpRequest";
import { GameWebTool } from "../GameWebTool";

/** 游戏数据存档管理接口 */
export class HttpGameData {

    private static get Url() { return `${mGameSetting.serverUrl}/gamedata/${mGameSetting.gameCode}/`; }

    /** 保存数据 */
    public static async saveGameData(reqData: HttpGameDataModel.GameData) {
        let url = this.Url + `save_gamedata`;
        let result = await HttpRequest.requestObject(url, { method: "POST", data: reqData, header: GameWebTool.gameCodeHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 删除数据 */
    public static async delGameData(reqData: HttpGameDataModel.ReqGameData) {
        let url = this.Url + `del_gamedata`;
        let result = await HttpRequest.requestObject(url, { method: "POST", data: reqData, header: GameWebTool.gameCodeHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 获取数据 */
    public static async getGameData(reqData: HttpGameDataModel.ReqGameData) {
        let url = this.Url + `get_gamedata`;
        let result = await HttpRequest.requestObject(url, { method: "POST", data: reqData, header: GameWebTool.gameCodeHeader }) as MResponse<HttpGameDataModel.GameData>;
        if (result?.code == 0) {
            return result.data;
        } else {
            mLogger.error(result);
            return null;
        }
    }

    /** 上传完成存档数据 */
    public static async savePlayerGameData(reqGetData: HttpGameDataModel.ReqSavePlayerGameData) {
        let url = this.Url + `save_playergamedata`;
        let result = await HttpRequest.requestObject(url, { method: "POST", data: reqGetData, header: GameWebTool.gameCodeHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 获取玩家存档数据 */
    public static async getPlayerGameData(reqGetData: HttpGameDataModel.ReqGetPlayerGameData) {
        let url = this.Url + `get_playergamedata`;
        let result = await HttpRequest.requestObject(url, { method: "POST", data: reqGetData, header: GameWebTool.gameCodeHeader }) as MResponse<HttpGameDataModel.RspPlayerGameData>;
        if (result?.code == 0) {
            return result.data;
        } else {
            mLogger.error(result);
            return null;
        }
    }

    /** 更新玩家信息 */
    public static async updatePlayerInfo(reqData: HttpGameDataModel.PlayerInfo) {
        let url = this.Url + `update_playerinfo`;
        let result = await HttpRequest.requestObject(url, { method: "POST", data: reqData, header: GameWebTool.gameCodeHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 获取玩家信息 */
    public static async getPlayerInfo(uid: string) {
        let url = this.Url + `get_playerinfo?uid=${uid}`;
        let result = await HttpRequest.requestObject(url, { method: "POST", header: GameWebTool.gameCodeHeader }) as MResponse<HttpGameDataModel.PlayerInfo>;
        if (result?.code == 0) {
            return result.data;
        } else {
            mLogger.error(result);
            return null;
        }
    }

}