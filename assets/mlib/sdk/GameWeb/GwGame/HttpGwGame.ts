// <auto-generated> This code was generated automatically. Do not modify. </auto-generated>

import { HttpRequest } from "../../../module/network/HttpRequest";
import { GameWebTool } from "../GameWebTool";

/** 游戏后台接口 */
export class HttpGwGame {

    private static get Url() { return `${mGameSetting.serverUrl}/gwgame/`; }

    /** 游戏后台 */
    public static async login(useruame: string, password: string) {
        let url = this.Url + `login?useruame=${useruame}&password=${password}`;
        let result = await HttpRequest.requestObject(url, { method: "POST", header: GameWebTool.tokenHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 添加游戏 */
    public static async addGame(game: string) {
        let url = this.Url + `add_game?game=${game}`;
        let result = await HttpRequest.requestObject(url, { method: "POST", header: GameWebTool.tokenHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 删除游戏 */
    public static async delGame(game: string) {
        let url = this.Url + `del_game?game=${game}`;
        let result = await HttpRequest.requestObject(url, { method: "POST", header: GameWebTool.tokenHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 添加游戏渠道 */
    public static async addGameChannel(game: string, channel: string) {
        let url = this.Url + `add_gamechannel?game=${game}&channel=${channel}`;
        let result = await HttpRequest.requestObject(url, { method: "POST", header: GameWebTool.tokenHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 删除游戏渠道 */
    public static async delGameChannel(game: string, channel: string) {
        let url = this.Url + `del_gamechannel?game=${game}&channel=${channel}`;
        let result = await HttpRequest.requestObject(url, { method: "POST", header: GameWebTool.tokenHeader }) as MResponse;
        if (result?.code == 0) {
            return true;
        } else {
            mLogger.error(result);
            return false;
        }
    }

    /** 获取所有游戏 */
    public static async getGames() {
        let url = this.Url + `get_games`;
        let result = await HttpRequest.requestObject(url, { method: "POST", header: GameWebTool.tokenHeader }) as MResponse<HttpGwGameModel.GwGame[]>;
        if (result?.code == 0) {
            return result.data;
        } else {
            mLogger.error(result);
            return null;
        }
    }

}